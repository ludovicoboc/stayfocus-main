# üß™ Pipeline TDD - M√≥dulo Estudos e Concursos
# Seguindo padr√µes estabelecidos nos m√≥dulos de alimenta√ß√£o e sa√∫de

name: Estudos e Concursos - TDD Pipeline

on:
  push:
    paths:
      - 'app/stores/concursosStore.ts'
      - 'app/stores/questoesStore.ts'
      - 'app/stores/registroEstudosStore.ts'
      - 'app/stores/pomodoroStore.ts'
      - 'app/stores/historicoSimuladosStore.ts'
      - 'app/components/concursos/**'
      - 'app/components/estudos/**'
      - 'app/concursos/**'
      - 'app/estudos/**'
      - '__tests__/components/concursos/**'
      - '__tests__/components/estudos/**'
      - '__tests__/hooks/estudos-concursos/**'
      - '__tests__/services/estudos-concursos/**'
      - '__tests__/factories/estudos-concursos.ts'
      - '__tests__/mocks/handlers/estudos-concursos.ts'
  pull_request:
    paths:
      - 'app/stores/concursosStore.ts'
      - 'app/stores/questoesStore.ts'
      - 'app/stores/registroEstudosStore.ts'
      - 'app/stores/pomodoroStore.ts'
      - 'app/stores/historicoSimuladosStore.ts'
      - 'app/components/concursos/**'
      - 'app/components/estudos/**'

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 70
  PERFORMANCE_THRESHOLD: 100
  QUERY_PERFORMANCE_THRESHOLD: 200

jobs:
  # ===== QUALITY GATE 1: SETUP E DEPEND√äNCIAS =====
  setup:
    name: üîß Setup e Valida√ß√£o
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Gerar cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: node-modules-

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Validar estrutura de arquivos
        run: |
          echo "üîç Validando estrutura de arquivos..."
          test -f "__tests__/factories/estudos-concursos.ts" || exit 1
          test -f "__tests__/mocks/handlers/estudos-concursos.ts" || exit 1
          echo "‚úÖ Estrutura de arquivos v√°lida"

  # ===== QUALITY GATE 2: TESTES UNIT√ÅRIOS =====
  unit-tests:
    name: üß™ Testes Unit√°rios
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-group: [stores, components, hooks, services]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Executar testes - ${{ matrix.test-group }}
        run: |
          case "${{ matrix.test-group }}" in
            stores)
              npm run test -- __tests__/hooks/useConcursos.test.ts __tests__/hooks/useQuestoes.test.ts __tests__/hooks/useRegistroEstudos.test.ts --coverage
              ;;
            components)
              npm run test -- __tests__/components/concursos/ __tests__/components/estudos/ --coverage
              ;;
            hooks)
              npm run test -- __tests__/hooks/estudos-concursos/ --coverage
              ;;
            services)
              npm run test -- __tests__/services/estudos-concursos/ --coverage
              ;;
          esac

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/

  # ===== QUALITY GATE 3: COVERAGE E QUALIDADE =====
  coverage-analysis:
    name: üìä An√°lise de Coverage
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports/

      - name: Executar coverage completo
        run: |
          npm run test -- estudos-concursos --coverage --reporter=json --reporter=text
          
      - name: Verificar threshold de coverage
        run: |
          COVERAGE=$(npm run test:coverage -- --reporter=json | jq '.total.lines.pct')
          echo "Coverage atual: $COVERAGE%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% abaixo do threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "‚úÖ Coverage $COVERAGE% atende o threshold"

      - name: Verificar coverage por m√≥dulo
        run: |
          echo "üìä Coverage por m√≥dulo:"
          echo "Stores: $(npm run test:coverage -- app/stores/concursosStore.ts app/stores/questoesStore.ts --reporter=json | jq '.total.lines.pct')%"
          echo "Componentes: $(npm run test:coverage -- app/components/concursos/ app/components/estudos/ --reporter=json | jq '.total.lines.pct')%"

  # ===== QUALITY GATE 4: PERFORMANCE =====
  performance-tests:
    name: ‚ö° Testes de Performance
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Testes de performance de componentes
        run: |
          npm run test -- estudos-concursos --grep="performance|render" --reporter=verbose
        env:
          VITEST_MAX_DURATION: ${{ env.PERFORMANCE_THRESHOLD }}

      - name: Testes de performance de queries
        run: |
          npm run test -- estudos-concursos --grep="query|search|busca" --reporter=verbose
        env:
          VITEST_QUERY_TIMEOUT: ${{ env.QUERY_PERFORMANCE_THRESHOLD }}

      - name: Benchmark de stores
        run: |
          npm run test -- estudos-concursos --grep="benchmark|lote|bulk" --reporter=verbose

  # ===== QUALITY GATE 5: VALIDA√á√ÉO EDUCACIONAL =====
  educational-validation:
    name: üéì Valida√ß√£o Educacional
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Valida√ß√£o de estrutura de quest√µes
        run: |
          npm run test -- estudos-concursos --grep="educational|validation|integrity|questao"

      - name: Valida√ß√£o de dados de simulados
        run: |
          npm run test -- estudos-concursos --grep="simulado|consistency|alternativa"

      - name: Valida√ß√£o de relacionamentos
        run: |
          npm run test -- estudos-concursos --grep="relacionamento|foreign|reference"

  # ===== QUALITY GATE 6: TESTES DE INTEGRA√á√ÉO =====
  integration-tests:
    name: üîó Testes de Integra√ß√£o
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: estudos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup banco de teste
        run: |
          npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/estudos_test

      - name: Testes de integra√ß√£o E2E
        run: |
          npm run test -- __tests__/integration/estudos-concursos/ --reporter=verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/estudos_test

      - name: Testes de fluxo completo
        run: |
          npm run test -- estudos-concursos --grep="flow|e2e|integration"

  # ===== QUALITY GATE 7: ACESSIBILIDADE =====
  accessibility-tests:
    name: ‚ôø Testes de Acessibilidade
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Testes de acessibilidade
        run: |
          npm run test -- estudos-concursos --grep="accessibility|a11y|keyboard|screen.*reader"

      - name: Valida√ß√£o ARIA
        run: |
          npm run test -- estudos-concursos --grep="aria|role|label"

  # ===== CONSOLIDA√á√ÉO FINAL =====
  quality-gates-summary:
    name: üìã Resumo Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, coverage-analysis, performance-tests, educational-validation, integration-tests, accessibility-tests]
    if: always()
    steps:
      - name: Verificar status dos quality gates
        run: |
          echo "üéØ RESUMO DOS QUALITY GATES - ESTUDOS E CONCURSOS"
          echo "================================================"
          echo "‚úÖ Testes Unit√°rios: ${{ needs.unit-tests.result }}"
          echo "‚úÖ Coverage Analysis: ${{ needs.coverage-analysis.result }}"
          echo "‚úÖ Performance: ${{ needs.performance-tests.result }}"
          echo "‚úÖ Valida√ß√£o Educacional: ${{ needs.educational-validation.result }}"
          echo "‚úÖ Integra√ß√£o: ${{ needs.integration-tests.result }}"
          echo "‚úÖ Acessibilidade: ${{ needs.accessibility-tests.result }}"
          echo "================================================"
          
          # Verificar se algum quality gate falhou
          if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.coverage-analysis.result }}" != "success" ]] || \
             [[ "${{ needs.performance-tests.result }}" != "success" ]] || \
             [[ "${{ needs.educational-validation.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
            echo "‚ùå Um ou mais quality gates falharam"
            exit 1
          fi
          
          echo "üéâ Todos os quality gates passaram com sucesso!"

      - name: Notificar sucesso
        if: success()
        run: |
          echo "üöÄ Pipeline TDD conclu√≠do com sucesso para Estudos e Concursos"
          echo "üìä M√©tricas atingidas:"
          echo "   - Coverage > $COVERAGE_THRESHOLD%"
          echo "   - Performance < $PERFORMANCE_THRESHOLD ms"
          echo "   - Query Performance < $QUERY_PERFORMANCE_THRESHOLD ms"
          echo "   - Valida√ß√£o Educacional: 100%"
          echo "   - Acessibilidade: WCAG 2.1 AA"
