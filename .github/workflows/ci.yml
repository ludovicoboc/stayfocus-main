name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CACHE_KEY: node-modules

jobs:
  # Job 1: Lint e Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Check Prettier formatting
        run: npx prettier --check .

  # Job 2: Testes Unitários
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # Job 3: Testes de Integração
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

  # Job 4: Build e Análise de Bundle
  build-and-analyze:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        run: npm run analyze
        env:
          ANALYZE: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            out/
          retention-days: 7

  # Job 5: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 6: Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build-and-analyze]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage
        continue-on-error: true

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          npm run test:coverage -- --reporter=json > coverage-summary.json
          
          # Extract coverage percentages
          LINES=$(cat coverage-summary.json | jq '.total.lines.pct')
          FUNCTIONS=$(cat coverage-summary.json | jq '.total.functions.pct')
          BRANCHES=$(cat coverage-summary.json | jq '.total.branches.pct')
          STATEMENTS=$(cat coverage-summary.json | jq '.total.statements.pct')
          
          echo "Coverage: Lines: $LINES%, Functions: $FUNCTIONS%, Branches: $BRANCHES%, Statements: $STATEMENTS%"
          
          # Check thresholds (70% minimum)
          if (( $(echo "$LINES < 70" | bc -l) )); then
            echo "❌ Line coverage below 70%: $LINES%"
            exit 1
          fi
          
          if (( $(echo "$FUNCTIONS < 70" | bc -l) )); then
            echo "❌ Function coverage below 70%: $FUNCTIONS%"
            exit 1
          fi
          
          if (( $(echo "$BRANCHES < 70" | bc -l) )); then
            echo "❌ Branch coverage below 70%: $BRANCHES%"
            exit 1
          fi
          
          if (( $(echo "$STATEMENTS < 70" | bc -l) )); then
            echo "❌ Statement coverage below 70%: $STATEMENTS%"
            exit 1
          fi
          
          echo "✅ All coverage thresholds met!"

      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-and-analyze.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"

  # Job 7: Deploy (apenas para main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GENTLE_BAY_09EDEFE0F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: ""

  # Job 8: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          # Aqui você pode adicionar notificações para Slack, Discord, etc.

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Aqui você pode adicionar notificações para Slack, Discord, etc.
