name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: PR Information
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    steps:
      - name: PR Info
        run: |
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Files Changed: ${{ github.event.pull_request.changed_files }}"
          echo "Additions: ${{ github.event.pull_request.additions }}"
          echo "Deletions: ${{ github.event.pull_request.deletions }}"

  # Job 2: Changed Files Analysis
  changed-files:
    name: Analyze Changed Files
    runs-on: ubuntu-latest
    outputs:
      has-tests: ${{ steps.changes.outputs.tests }}
      has-components: ${{ steps.changes.outputs.components }}
      has-hooks: ${{ steps.changes.outputs.hooks }}
      has-services: ${{ steps.changes.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if tests were added/modified
          if echo "$CHANGED_FILES" | grep -q "__tests__\|\.test\.\|\.spec\."; then
            echo "tests=true" >> $GITHUB_OUTPUT
          else
            echo "tests=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if components were changed
          if echo "$CHANGED_FILES" | grep -q "components/"; then
            echo "components=true" >> $GITHUB_OUTPUT
          else
            echo "components=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if hooks were changed
          if echo "$CHANGED_FILES" | grep -q "hooks/"; then
            echo "hooks=true" >> $GITHUB_OUTPUT
          else
            echo "hooks=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if services were changed
          if echo "$CHANGED_FILES" | grep -q "services/\|lib/"; then
            echo "services=true" >> $GITHUB_OUTPUT
          else
            echo "services=false" >> $GITHUB_OUTPUT
          fi

  # Job 3: Test Coverage Diff
  test-coverage-diff:
    name: Test Coverage Diff
    runs-on: ubuntu-latest
    needs: [changed-files]
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage (PR)
        run: npm run test:coverage -- --reporter=json > coverage-pr.json

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Install dependencies (base)
        run: npm ci

      - name: Run tests with coverage (base)
        run: npm run test:coverage -- --reporter=json > coverage-base.json
        continue-on-error: true

      - name: Compare coverage
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage-base.json ] && [ -f coverage-pr.json ]; then
            PR_LINES=$(cat coverage-pr.json | jq '.total.lines.pct')
            BASE_LINES=$(cat coverage-base.json | jq '.total.lines.pct')
            DIFF=$(echo "$PR_LINES - $BASE_LINES" | bc -l)
            
            echo "| Metric | Base | PR | Diff |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|----|----- |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${BASE_LINES}% | ${PR_LINES}% | ${DIFF}% |" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$DIFF < 0" | bc -l) )); then
              echo "⚠️ Coverage decreased by ${DIFF}%" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Coverage improved by ${DIFF}%" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Could not compare coverage - base coverage not available" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 4: Test Requirements Check
  test-requirements:
    name: Check Test Requirements
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.has-components == 'true' || needs.changed-files.outputs.has-hooks == 'true' || needs.changed-files.outputs.has-services == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if tests were added
        run: |
          if [[ "${{ needs.changed-files.outputs.has-tests }}" == "false" ]]; then
            echo "❌ Code changes detected but no tests were added or modified"
            echo "Please add tests for your changes in:"
            if [[ "${{ needs.changed-files.outputs.has-components }}" == "true" ]]; then
              echo "- Components: __tests__/components/"
            fi
            if [[ "${{ needs.changed-files.outputs.has-hooks }}" == "true" ]]; then
              echo "- Hooks: __tests__/hooks/"
            fi
            if [[ "${{ needs.changed-files.outputs.has-services }}" == "true" ]]; then
              echo "- Services: __tests__/services/"
            fi
            exit 1
          else
            echo "✅ Tests were added or modified"
          fi

  # Job 5: Performance Impact Check
  performance-check:
    name: Performance Impact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npm run analyze > bundle-analysis.txt 2>&1 || true

      - name: Comment bundle analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let analysis = '';
            try {
              analysis = fs.readFileSync('bundle-analysis.txt', 'utf8');
            } catch (error) {
              analysis = 'Bundle analysis not available';
            }
            
            const comment = `## 📦 Bundle Analysis
            
            \`\`\`
            ${analysis}
            \`\`\`
            
            Please review the bundle size impact of your changes.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 6: Code Quality Metrics
  code-quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with metrics
        run: |
          npx eslint . --format json > eslint-report.json || true
          
          # Count issues
          ERRORS=$(cat eslint-report.json | jq '[.[].messages[] | select(.severity == 2)] | length')
          WARNINGS=$(cat eslint-report.json | jq '[.[].messages[] | select(.severity == 1)] | length')
          
          echo "## 🔍 Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint Warnings | $WARNINGS |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ERRORS" -gt 0 ]; then
            echo "❌ ESLint errors found - please fix before merging" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ No ESLint errors found" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 7: Accessibility Check
  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.has-components == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: |
          # Run tests that include accessibility checks
          npm run test:run -- --testNamePattern="accessibility|a11y" || true
          echo "✅ Accessibility checks completed"

  # Job 8: Final PR Status
  pr-status:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [test-coverage-diff, test-requirements, performance-check, code-quality]
    if: always()
    steps:
      - name: Update PR status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });
            
            const failedChecks = checks.check_runs.filter(check => 
              check.conclusion === 'failure' || check.conclusion === 'cancelled'
            );
            
            let status = '✅ All checks passed!';
            if (failedChecks.length > 0) {
              status = `❌ ${failedChecks.length} check(s) failed`;
            }
            
            const comment = `## 🚀 PR Quality Check Summary
            
            ${status}
            
            ### Checklist:
            - ${{ needs.test-requirements.result == 'success' && '✅' || '❌' }} Tests added for code changes
            - ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} Code quality checks passed
            - ${{ needs.test-coverage-diff.result == 'success' && '✅' || '❌' }} Coverage analysis completed
            - ${{ needs.performance-check.result == 'success' && '✅' || '❌' }} Performance impact analyzed
            
            ${failedChecks.length > 0 ? '⚠️ Please address the failing checks before merging.' : '🎉 Ready for review!'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
