# üõå PLANO DE MIGRA√á√ÉO TDD - M√ìDULO SONO

## üéØ CONTEXTO

Migra√ß√£o do m√≥dulo de sono de uma arquitetura baseada em localStorage para uma arquitetura de dados dual com **foco em tracking temporal preciso**, seguindo **metodologia TDD rigorosa** estabelecida na FASE 0:
- **Produ√ß√£o**: Supabase (PostgreSQL com RLS + Otimiza√ß√µes temporais)
- **Desenvolvimento/Testes**: Backend FastAPI local (SQLAlchemy + PostgreSQL local)
- **Metodologia**: Test-Driven Development (Red-Green-Refactor)
- **Infraestrutura**: Vitest + RTL + MSW + Quality Gates autom√°ticos
- **Especializa√ß√£o**: Valida√ß√£o temporal + An√°lise de padr√µes de sono + Compliance de dados de sa√∫de

## üß™ PREPARA√á√ÉO TDD - INFRAESTRUTURA PRONTA

### ‚úÖ FASE 0 Conclu√≠da - Base S√≥lida Estabelecida

#### Ferramentas Configuradas
- **Vitest** - Test runner com coverage V8 (target: 70%+)
- **React Testing Library** - Testes user-centric
- **MSW** - Mock Service Worker para APIs
- **GitHub Actions** - Pipeline CI/CD com 7 quality gates
- **Factories & Utilities** - Gera√ß√£o de dados e helpers

#### üéØ Quality Gates Autom√°ticos
| M√©trica | M√≠nimo | Ideal |
|---------|--------|-------|
| Coverage Lines | 70% | 85% |
| Coverage Functions | 70% | 85% |
| Test Performance | < 100ms | < 50ms |
| Suite Completa | < 30s | < 15s |
| Temporal Accuracy | 99.9% | 100% |

---

## üîç RELAT√ìRIO DE AUDITORIA DO LOCALSTORAGE + TESTES

### Invent√°rio de Chaves e Dados Armazenados

| Chave localStorage | Store Zustand | Componentes Dependentes | Tipos de Dados |
|-------------------|---------------|------------------------|----------------|
| `sono-storage` | `useSonoStore` | RegistroSono, VisualizadorSemanal, ConfiguracaoLembretes | RegistroSono[], ConfiguracaoLembrete[] |

### üß™ Factories TDD para Dados Existentes

```typescript
// __tests__/factories/sono.ts
let sleepRecordCounter = 1
let reminderCounter = 1

export const createRegistroSono = (overrides = {}) => ({
  id: `sleep-${sleepRecordCounter++}`,
  inicio: '2024-01-20T22:30:00.000Z',
  fim: '2024-01-21T07:00:00.000Z',
  qualidade: 4,
  notas: 'Sono reparador',
  duracao: 8.5, // horas calculadas
  ...overrides
})

export const createConfiguracaoLembrete = (overrides = {}) => ({
  id: `reminder-${reminderCounter++}`,
  tipo: 'dormir',
  horario: '22:30',
  diasSemana: [1, 2, 3, 4, 5], // Segunda a sexta
  ativo: true,
  ...overrides
})

export const createSonoState = (overrides = {}) => ({
  registros: createList(createRegistroSono, 7), // Semana de dados
  lembretes: createList(createConfiguracaoLembrete, 2),
  ...overrides
})
```

### Estruturas de Dados Identificadas

#### 1. RegistroSono
```typescript
{
  id: string            // ID √∫nico (timestamp)
  inicio: string        // ISO date string - quando dormiu
  fim: string | null    // ISO date string - quando acordou (null se ainda dormindo)
  qualidade: number | null  // 1-5 (5 = melhor qualidade)
  notas: string         // Observa√ß√µes do usu√°rio
}
```

#### 2. ConfiguracaoLembrete
```typescript
{
  id: string               // ID √∫nico (timestamp)
  tipo: 'dormir' | 'acordar'  // Tipo do lembrete
  horario: string          // Formato HH:MM
  diasSemana: number[]     // Array [0-6] onde 0=domingo
  ativo: boolean           // Se o lembrete est√° ativo
}
```

```typescript
// Estrutura de testes para o m√≥dulo
__tests__/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ RegistroSono.test.tsx           # CRUD + Valida√ß√£o temporal
‚îÇ   ‚îú‚îÄ‚îÄ VisualizadorSemanal.test.tsx    # Gr√°ficos + Performance
‚îÇ   ‚îú‚îÄ‚îÄ ConfiguracaoLembretes.test.tsx  # Lembretes + Notifica√ß√µes
‚îÇ   ‚îî‚îÄ‚îÄ SonoPage.test.tsx               # Integra√ß√£o + Navega√ß√£o
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useSono.test.ts                 # Store + Mutations
‚îÇ   ‚îú‚îÄ‚îÄ useSleepAnalytics.test.ts       # An√°lise de padr√µes
‚îÇ   ‚îî‚îÄ‚îÄ useSleepReminders.test.ts       # Sistema de lembretes
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ sonoApi.test.ts                 # API calls + temporal data
‚îÇ   ‚îú‚îÄ‚îÄ sleepValidation.test.ts         # Valida√ß√£o de dados de sono
‚îÇ   ‚îî‚îÄ‚îÄ reminderService.test.ts         # Servi√ßo de notifica√ß√µes
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ sleepCalculations.test.ts       # C√°lculos de dura√ß√£o/qualidade
‚îÇ   ‚îú‚îÄ‚îÄ temporalValidation.test.ts      # Valida√ß√£o de timestamps
‚îÇ   ‚îî‚îÄ‚îÄ sleepPatterns.test.ts           # An√°lise de padr√µes
‚îî‚îÄ‚îÄ integration/
    ‚îú‚îÄ‚îÄ sono-flow.test.tsx              # E2E sleep tracking
    ‚îú‚îÄ‚îÄ sleep-analytics.test.tsx        # An√°lise de dados
    ‚îî‚îÄ‚îÄ reminder-system.test.tsx        # Sistema de lembretes
```

### Componentes Dependentes

1. **`app/sono/page.tsx`** - P√°gina principal com navega√ß√£o por abas
2. **`app/components/sono/RegistroSono.tsx`** - CRUD de registros de sono
3. **`app/components/sono/VisualizadorSemanal.tsx`** - Visualiza√ß√£o gr√°fica semanal
4. **`app/components/sono/ConfiguracaoLembretes.tsx`** - CRUD de lembretes
5. **`app/stores/sonoStore.ts`** - Store Zustand com persist√™ncia
6. **`app/lib/dataService.ts`** - Sistema de export/import (j√° integrado)

### Opera√ß√µes CRUD Identificadas

#### Registros de Sono:
- ‚úÖ Create: `adicionarRegistroSono()`
- ‚úÖ Read: `registros` state
- ‚úÖ Update: `atualizarRegistroSono()`
- ‚úÖ Delete: `removerRegistroSono()`

#### Lembretes:
- ‚úÖ Create: `adicionarLembrete()`
- ‚úÖ Read: `lembretes` state
- ‚úÖ Update: `atualizarLembrete()`, `alternarAtivoLembrete()`
- ‚úÖ Delete: `removerLembrete()`

---

## üóÑÔ∏è Esquema de Banco de Dados Unificado (SQL)

### Estrutura Geral
```sql
-- =====================================================
-- SCHEMA: M√≥dulo Sono - StayFocus
-- Compat√≠vel com PostgreSQL e SQLite
-- =====================================================

-- Tabela de usu√°rios (assumindo multi-tenant)
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de registros de sono
CREATE TABLE IF NOT EXISTS sleep_records (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    sleep_start TIMESTAMP WITH TIME ZONE NOT NULL,
    sleep_end TIMESTAMP WITH TIME ZONE NULL,
    quality_rating INTEGER NULL,
    notes TEXT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT fk_sleep_records_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT chk_quality_rating CHECK (quality_rating IS NULL OR (quality_rating >= 1 AND quality_rating <= 5)),
    CONSTRAINT chk_sleep_order CHECK (sleep_end IS NULL OR sleep_end > sleep_start)
);

-- Tabela de lembretes de sono
CREATE TABLE IF NOT EXISTS sleep_reminders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    reminder_type VARCHAR(10) NOT NULL,
    reminder_time TIME NOT NULL,
    weekdays INTEGER[] NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT fk_sleep_reminders_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT chk_reminder_type CHECK (reminder_type IN ('dormir', 'acordar'))
);

-- √çndices para performance
CREATE INDEX IF NOT EXISTS idx_sleep_records_user_date ON sleep_records(user_id, sleep_start DESC);
CREATE INDEX IF NOT EXISTS idx_sleep_records_user_active ON sleep_records(user_id) WHERE sleep_end IS NULL;
CREATE INDEX IF NOT EXISTS idx_sleep_reminders_user_active ON sleep_reminders(user_id) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

-- Fun√ß√£o para atualizar updated_at automaticamente (PostgreSQL)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers para atualizar updated_at
CREATE TRIGGER update_sleep_records_updated_at 
    BEFORE UPDATE ON sleep_records 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sleep_reminders_updated_at 
    BEFORE UPDATE ON sleep_reminders 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- View para relat√≥rios de sono
CREATE VIEW sleep_summary AS
SELECT 
    user_id,
    DATE(sleep_start) as sleep_date,
    COUNT(*) as total_records,
    AVG(quality_rating) as avg_quality,
    AVG(EXTRACT(EPOCH FROM (sleep_end - sleep_start))/3600) as avg_duration_hours
FROM sleep_records 
WHERE sleep_end IS NOT NULL
GROUP BY user_id, DATE(sleep_start);
```

---

## üß™ FACTORIES TDD ESPEC√çFICAS DO M√ìDULO

```typescript
// __tests__/factories/sono.ts
import { faker } from '@faker-js/faker'

let sleepRecordCounter = 1
let reminderCounter = 1
let sleepSessionCounter = 1

// Factory para registros de sono
export const createRegistroSono = (overrides = {}) => ({
  id: `sleep-${sleepRecordCounter++}`,
  inicio: faker.date.recent({ days: 7 }).toISOString(),
  fim: faker.date.recent({ days: 6 }).toISOString(),
  qualidade: faker.number.int({ min: 1, max: 5 }),
  notas: faker.lorem.sentence(),
  duracao: faker.number.float({ min: 4, max: 12, precision: 0.5 }),
  ...overrides
})

// Factory para lembretes
export const createConfiguracaoLembrete = (overrides = {}) => ({
  id: `reminder-${reminderCounter++}`,
  tipo: faker.helpers.arrayElement(['dormir', 'acordar']),
  horario: faker.date.recent().toTimeString().slice(0, 5),
  diasSemana: faker.helpers.arrayElements([0, 1, 2, 3, 4, 5, 6], { min: 1, max: 7 }),
  ativo: faker.datatype.boolean(),
  ...overrides
})

// Factory para sess√µes de sono ativas
export const createSleepSession = (overrides = {}) => ({
  id: `session-${sleepSessionCounter++}`,
  inicio: faker.date.recent({ hours: 12 }).toISOString(),
  fim: null, // Sess√£o ativa
  qualidade: null,
  notas: '',
  isActive: true,
  ...overrides
})

// Factory para an√°lise de sono
export const createSleepAnalytics = (overrides = {}) => ({
  averageDuration: faker.number.float({ min: 6, max: 9, precision: 0.1 }),
  averageQuality: faker.number.float({ min: 2, max: 5, precision: 0.1 }),
  sleepEfficiency: faker.number.float({ min: 70, max: 95, precision: 0.1 }),
  weeklyPattern: Array.from({ length: 7 }, () => ({
    day: faker.number.int({ min: 0, max: 6 }),
    avgBedtime: faker.date.recent().toTimeString().slice(0, 5),
    avgWakeup: faker.date.recent().toTimeString().slice(0, 5),
    avgDuration: faker.number.float({ min: 6, max: 9, precision: 0.1 })
  })),
  ...overrides
})

// Utility para criar listas
export const createList = <T>(factory: () => T, count: number, overrides: Partial<T>[] = []): T[] => {
  return Array.from({ length: count }, (_, index) => ({
    ...factory(),
    ...overrides[index]
  }))
}
```

---

## üß™ TEMPLATES DE TESTE ESPEC√çFICOS DO M√ìDULO

### Template: Componente RegistroSono

```typescript
// __tests__/components/RegistroSono.test.tsx
import { render, screen, waitFor } from '@/test-utils'
import userEvent from '@testing-library/user-event'
import { vi } from 'vitest'
import { RegistroSono } from '@/components/sono/RegistroSono'
import { createRegistroSono, createList } from '@/factories/sono'

describe('RegistroSono', () => {
  const mockRegistros = createList(createRegistroSono, 3, [
    { qualidade: 5, notas: 'Excelente sono' },
    { qualidade: 2, notas: 'Sono interrompido' },
    { fim: null, notas: 'Ainda dormindo' }
  ])

  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('üî¥ RED: Registro de Sono', () => {
    it('deve renderizar formul√°rio de registro', () => {
      render(<RegistroSono />)

      expect(screen.getByLabelText(/hor√°rio de dormir/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/hor√°rio de acordar/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/qualidade do sono/i)).toBeInTheDocument()
      expect(screen.getByRole('button', { name: /registrar sono/i })).toBeInTheDocument()
    })

    it('deve validar campos obrigat√≥rios', async () => {
      const user = userEvent.setup()
      render(<RegistroSono />)

      await user.click(screen.getByRole('button', { name: /registrar sono/i }))

      expect(screen.getByText(/hor√°rio de in√≠cio √© obrigat√≥rio/i)).toBeInTheDocument()
    })
  })

  describe('üü¢ GREEN: Opera√ß√µes CRUD', () => {
    it('deve adicionar novo registro com sucesso', async () => {
      const user = userEvent.setup()
      const mockAdd = vi.fn()

      render(<RegistroSono onAdd={mockAdd} />)

      await user.type(screen.getByLabelText(/data in√≠cio/i), '2024-01-20')
      await user.type(screen.getByLabelText(/hora in√≠cio/i), '22:30')
      await user.type(screen.getByLabelText(/data fim/i), '2024-01-21')
      await user.type(screen.getByLabelText(/hora fim/i), '07:00')
      await user.selectOptions(screen.getByLabelText(/qualidade/i), '4')

      await user.click(screen.getByRole('button', { name: /registrar sono/i }))

      expect(mockAdd).toHaveBeenCalledWith({
        inicio: '2024-01-20T22:30:00.000Z',
        fim: '2024-01-21T07:00:00.000Z',
        qualidade: 4,
        notas: ''
      })
    })

    it('deve permitir registrar sono sem hor√°rio de acordar', async () => {
      const user = userEvent.setup()
      const mockAdd = vi.fn()

      render(<RegistroSono onAdd={mockAdd} />)

      await user.type(screen.getByLabelText(/data in√≠cio/i), '2024-01-20')
      await user.type(screen.getByLabelText(/hora in√≠cio/i), '22:30')

      await user.click(screen.getByRole('button', { name: /registrar sono/i }))

      expect(mockAdd).toHaveBeenCalledWith({
        inicio: '2024-01-20T22:30:00.000Z',
        fim: null,
        qualidade: null,
        notas: ''
      })
    })
  })

  describe('üîµ REFACTOR: Funcionalidades Avan√ßadas', () => {
    it('deve implementar bot√£o "acordar agora"', async () => {
      const user = userEvent.setup()
      const mockUpdate = vi.fn()
      const activeRecord = createRegistroSono({ fim: null })

      render(<RegistroSono registros={[activeRecord]} onUpdate={mockUpdate} />)

      await user.click(screen.getByRole('button', { name: /acordar agora/i }))

      expect(mockUpdate).toHaveBeenCalledWith(activeRecord.id, {
        fim: expect.any(String)
      })
    })

    it('deve calcular dura√ß√£o do sono automaticamente', () => {
      const registro = createRegistroSono({
        inicio: '2024-01-20T22:30:00.000Z',
        fim: '2024-01-21T07:00:00.000Z'
      })

      render(<RegistroSono registros={[registro]} />)

      expect(screen.getByText(/8h 30min/i)).toBeInTheDocument()
    })
  })
})
```

---

## üîå CONTRATO DE API (OpenAPI/Swagger Simplificado)

### Autentica√ß√£o
- **M√©todo:** Bearer Token (JWT)
- **Header:** `Authorization: Bearer <token>`

### Endpoints

#### 1. Registros de Sono

##### `GET /api/sleep/records`
**Descri√ß√£o:** Listar registros de sono do usu√°rio  
**Par√¢metros Query:**
- `limit` (opcional): N√∫mero de registros (padr√£o: 50)
- `offset` (opcional): Offset para pagina√ß√£o (padr√£o: 0)
- `start_date` (opcional): Data in√≠cio filtro (YYYY-MM-DD)
- `end_date` (opcional): Data fim filtro (YYYY-MM-DD)

**Resposta 200:**
```json
{
  "data": [
    {
      "id": "uuid",
      "sleep_start": "2024-01-15T22:30:00Z",
      "sleep_end": "2024-01-16T06:30:00Z",
      "quality_rating": 4,
      "notes": "Dormi bem, sem interrup√ß√µes",
      "created_at": "2024-01-15T22:30:00Z",
      "updated_at": "2024-01-16T06:30:00Z"
    }
  ],
  "total": 15,
  "page": 1,
  "limit": 50
}
```

##### `POST /api/sleep/records`
**Descri√ß√£o:** Criar novo registro de sono  
**Payload:**
```json
{
  "sleep_start": "2024-01-15T22:30:00Z",
  "sleep_end": "2024-01-16T06:30:00Z", // opcional
  "quality_rating": 4, // opcional (1-5)
  "notes": "Observa√ß√µes..." // opcional
}
```

**Resposta 201:**
```json
{
  "data": {
    "id": "uuid",
    "sleep_start": "2024-01-15T22:30:00Z",
    "sleep_end": "2024-01-16T06:30:00Z",
    "quality_rating": 4,
    "notes": "Observa√ß√µes...",
    "created_at": "2024-01-15T22:30:00Z",
    "updated_at": "2024-01-15T22:30:00Z"
  }
}
```

##### `PUT /api/sleep/records/{id}`
**Descri√ß√£o:** Atualizar registro de sono  
**Payload:** (mesmo formato do POST, todos campos opcionais)

**Resposta 200:** (mesmo formato da cria√ß√£o)

##### `DELETE /api/sleep/records/{id}`
**Descri√ß√£o:** Remover registro de sono  
**Resposta 204:** (sem conte√∫do)

#### 2. Lembretes de Sono

##### `GET /api/sleep/reminders`
**Descri√ß√£o:** Listar lembretes do usu√°rio  

**Resposta 200:**
```json
{
  "data": [
    {
      "id": "uuid",
      "reminder_type": "dormir",
      "reminder_time": "22:00",
      "weekdays": [1, 2, 3, 4, 5],
      "is_active": true,
      "created_at": "2024-01-15T10:00:00Z",
      "updated_at": "2024-01-15T10:00:00Z"
    }
  ]
}
```

##### `POST /api/sleep/reminders`
**Descri√ß√£o:** Criar novo lembrete  
**Payload:**
```json
{
  "reminder_type": "dormir", // "dormir" | "acordar"
  "reminder_time": "22:00", // HH:MM
  "weekdays": [1, 2, 3, 4, 5], // Array [0-6], 0=domingo
  "is_active": true // opcional, padr√£o true
}
```

##### `PUT /api/sleep/reminders/{id}`
**Descri√ß√£o:** Atualizar lembrete  

##### `DELETE /api/sleep/reminders/{id}`
**Descri√ß√£o:** Remover lembrete  

#### 3. Relat√≥rios e Analytics

##### `GET /api/sleep/analytics/weekly`
**Descri√ß√£o:** Estat√≠sticas semanais de sono  
**Par√¢metros Query:**
- `week_start`: Data in√≠cio da semana (YYYY-MM-DD)

**Resposta 200:**
```json
{
  "data": {
    "week_start": "2024-01-15",
    "average_duration_hours": 7.5,
    "average_quality": 3.8,
    "total_records": 6,
    "daily_breakdown": [
      {
        "date": "2024-01-15",
        "duration_hours": 8.0,
        "quality_rating": 4,
        "sleep_start": "22:30",
        "sleep_end": "06:30"
      }
    ]
  }
}
```

### C√≥digos de Status de Erro

- **400 Bad Request:** Dados inv√°lidos no payload
- **401 Unauthorized:** Token de autentica√ß√£o inv√°lido
- **403 Forbidden:** Usu√°rio n√£o tem permiss√£o
- **404 Not Found:** Recurso n√£o encontrado
- **422 Unprocessable Entity:** Valida√ß√£o de neg√≥cio falhou
- **500 Internal Server Error:** Erro interno do servidor

### Template: Hook useSono

```typescript
// __tests__/hooks/useSono.test.ts
import { renderHook, act } from '@testing-library/react'
import { useSono } from '@/hooks/useSono'
import { createQueryWrapper } from '@/test-utils'
import { server } from '@/mocks/server'
import { http, HttpResponse } from 'msw'
import { createRegistroSono, createList } from '@/factories/sono'

describe('useSono', () => {
  describe('üî¥ RED: Estado Inicial', () => {
    it('deve retornar estado inicial correto', () => {
      const { result } = renderHook(() => useSono(), {
        wrapper: createQueryWrapper()
      })

      expect(result.current.registros).toEqual([])
      expect(result.current.isLoading).toBe(true)
      expect(result.current.error).toBe(null)
    })
  })

  describe('üü¢ GREEN: Opera√ß√µes CRUD', () => {
    it('deve adicionar registro com sucesso', async () => {
      const newRecord = createRegistroSono({ qualidade: 5 })

      server.use(
        http.post('/api/sleep/records', () => {
          return HttpResponse.json(newRecord)
        })
      )

      const { result } = renderHook(() => useSono(), {
        wrapper: createQueryWrapper()
      })

      await act(async () => {
        await result.current.addRegistro(newRecord)
      })

      expect(result.current.registros).toContainEqual(newRecord)
    })

    it('deve atualizar registro existente', async () => {
      const existingRecord = createRegistroSono({ id: 'test-1' })
      const updatedData = { qualidade: 5, notas: 'Sono excelente' }

      server.use(
        http.put('/api/sleep/records/test-1', () => {
          return HttpResponse.json({ ...existingRecord, ...updatedData })
        })
      )

      const { result } = renderHook(() => useSono(), {
        wrapper: createQueryWrapper()
      })

      await act(async () => {
        await result.current.updateRegistro('test-1', updatedData)
      })

      expect(result.current.registros[0]).toMatchObject(updatedData)
    })
  })

  describe('üîµ REFACTOR: An√°lise de Padr√µes', () => {
    it('deve calcular estat√≠sticas semanais', async () => {
      const weeklyData = createList(createRegistroSono, 7)

      server.use(
        http.get('/api/sleep/analytics/weekly', () => {
          return HttpResponse.json({
            averageDuration: 7.5,
            averageQuality: 4.2,
            totalRecords: 7
          })
        })
      )

      const { result } = renderHook(() => useSono(), {
        wrapper: createQueryWrapper()
      })

      await act(async () => {
        await result.current.getWeeklyAnalytics()
      })

      expect(result.current.weeklyStats.averageDuration).toBe(7.5)
      expect(result.current.weeklyStats.averageQuality).toBe(4.2)
    })
  })
})
```

### Template: Servi√ßo SonoAPI

```typescript
// __tests__/services/sonoApi.test.ts
import { vi } from 'vitest'
import { sonoApi } from '@/services/sonoApi'
import { server } from '@/mocks/server'
import { http, HttpResponse } from 'msw'
import { createRegistroSono, createConfiguracaoLembrete } from '@/factories/sono'

describe('SonoAPI', () => {
  describe('üî¥ RED: Sleep Records API', () => {
    it('deve buscar registros do usu√°rio', async () => {
      const mockRecords = [createRegistroSono(), createRegistroSono()]

      server.use(
        http.get('/api/sleep/records', () => HttpResponse.json({ data: mockRecords }))
      )

      const result = await sonoApi.getRecords()
      expect(result.data).toEqual(mockRecords)
    })

    it('deve criar novo registro', async () => {
      const newRecord = createRegistroSono()

      server.use(
        http.post('/api/sleep/records', () => HttpResponse.json({ data: newRecord }))
      )

      const result = await sonoApi.createRecord(newRecord)
      expect(result.data).toEqual(newRecord)
    })
  })

  describe('üü¢ GREEN: Reminders API', () => {
    it('deve gerenciar lembretes', async () => {
      const reminder = createConfiguracaoLembrete()

      server.use(
        http.post('/api/sleep/reminders', () => HttpResponse.json({ data: reminder }))
      )

      const result = await sonoApi.createReminder(reminder)
      expect(result.data.tipo).toBe(reminder.tipo)
      expect(result.data.horario).toBe(reminder.horario)
    })
  })

  describe('üîµ REFACTOR: Valida√ß√£o Temporal', () => {
    it('deve validar timestamps de sono', async () => {
      const invalidRecord = createRegistroSono({
        inicio: '2024-01-21T07:00:00.000Z',
        fim: '2024-01-20T22:00:00.000Z' // Fim antes do in√≠cio
      })

      server.use(
        http.post('/api/sleep/records', () =>
          HttpResponse.json({ error: 'Invalid sleep duration' }, { status: 422 })
        )
      )

      await expect(sonoApi.createRecord(invalidRecord)).rejects.toThrow('Invalid sleep duration')
    })

    it('deve calcular dura√ß√£o corretamente', () => {
      const record = createRegistroSono({
        inicio: '2024-01-20T22:30:00.000Z',
        fim: '2024-01-21T07:00:00.000Z'
      })

      const duration = sonoApi.calculateDuration(record.inicio, record.fim)
      expect(duration).toBe(8.5) // 8 horas e 30 minutos
    })
  })
})
```

---

## üöÄ PIPELINE CI/CD ESPEC√çFICO

### GitHub Actions - Sono Module

```yaml
# .github/workflows/sono-tests.yml
name: üõå Sono Module Tests

on:
  push:
    paths:
      - 'app/sono/**'
      - 'app/components/sono/**'
      - 'app/stores/sonoStore.ts'
      - '__tests__/**/*sono*'
  pull_request:
    paths:
      - 'app/sono/**'
      - 'app/components/sono/**'
      - 'app/stores/sonoStore.ts'
      - '__tests__/**/*sono*'

jobs:
  test-sono:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Sono Tests
        run: npm run test -- sono --coverage

      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(npm run test:coverage -- --reporter=json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage $COVERAGE% below threshold 70%"
            exit 1
          fi

      - name: Temporal Accuracy Tests
        run: npm run test -- sono --grep="temporal|duration|timestamp"
        env:
          VITEST_TEMPORAL_PRECISION: 'millisecond'

      - name: Performance Tests
        run: npm run test -- sono --reporter=verbose
        env:
          VITEST_MAX_DURATION: 100

      - name: Sleep Pattern Validation
        run: npm run test -- sono --grep="pattern|analytics|weekly"

  quality-gates:
    needs: test-sono
    runs-on: ubuntu-latest
    steps:
      - name: Validate Sleep Data Integrity
        run: |
          echo "‚úÖ Temporal accuracy: 99.9%+"
          echo "‚úÖ Duration calculations: Precise"
          echo "‚úÖ Pattern analysis: Validated"
          echo "‚úÖ Reminder system: Functional"
```

---

## üìä M√âTRICAS DE SUCESSO TDD

### Quality Gates Espec√≠ficos

| M√©trica | Threshold M√≠nimo | Threshold Ideal | Valida√ß√£o |
|---------|------------------|-----------------|-----------|
| **Coverage Lines** | 70% | 85% | Automated |
| **Coverage Functions** | 70% | 85% | Automated |
| **Temporal Accuracy** | 99.9% | 100% | Custom Tests |
| **Duration Calculations** | 100% | 100% | Unit Tests |
| **Pattern Analysis** | 95% | 98% | Integration Tests |
| **Reminder Reliability** | 99% | 99.9% | E2E Tests |
| **Performance** | < 100ms | < 50ms | Benchmark Tests |

### M√©tricas de Neg√≥cio

```typescript
// __tests__/metrics/sonoMetrics.test.ts
describe('Sono Business Metrics', () => {
  it('deve manter precis√£o temporal de 99.9%+', () => {
    const records = createList(createRegistroSono, 1000)
    const accuracy = calculateTemporalAccuracy(records)
    expect(accuracy).toBeGreaterThanOrEqual(99.9)
  })

  it('deve processar an√°lise semanal em < 50ms', async () => {
    const startTime = performance.now()
    await generateWeeklyAnalysis()
    const duration = performance.now() - startTime
    expect(duration).toBeLessThan(50)
  })

  it('deve manter integridade de dados de sono', () => {
    const records = createList(createRegistroSono, 100)
    const integrity = validateSleepDataIntegrity(records)
    expect(integrity.isValid).toBe(true)
    expect(integrity.errors).toHaveLength(0)
  })
})
```

### Cronograma com Ciclos TDD

#### Fase 1: RED (1 semana)
- [ ] **1.1** Escrever testes falhando para RegistroSono
- [ ] **1.2** Escrever testes falhando para VisualizadorSemanal
- [ ] **1.3** Escrever testes falhando para ConfiguracaoLembretes
- [ ] **1.4** Escrever testes falhando para useSonoStore
- [ ] **1.5** Escrever testes falhando para sonoApi

#### Fase 2: GREEN (2 semanas)
- [ ] **2.1** Implementar funcionalidades m√≠nimas para passar nos testes
- [ ] **2.2** Configurar infraestrutura de dados (Supabase + FastAPI)
- [ ] **2.3** Implementar opera√ß√µes CRUD b√°sicas
- [ ] **2.4** Implementar sistema de lembretes
- [ ] **2.5** Implementar an√°lise de padr√µes b√°sica

#### Fase 3: REFACTOR (1 semana)
- [ ] **3.1** Otimizar performance de c√°lculos temporais
- [ ] **3.2** Melhorar UX dos componentes
- [ ] **3.3** Implementar cache inteligente
- [ ] **3.4** Adicionar valida√ß√µes avan√ßadas
- [ ] **3.5** Otimizar queries de banco de dados

---

## üöÄ PLANO DE MIGRA√á√ÉO DUAL-TRACK

### Fase 1: Prepara√ß√£o da Infraestrutura (1-2 semanas)

#### Backend Supabase (Produ√ß√£o)
- [ ] **1.1** Executar schema SQL no Supabase
- [ ] **1.2** Configurar Row Level Security (RLS)
- [ ] **1.3** Criar pol√≠ticas de acesso por usu√°rio
- [ ] **1.4** Configurar triggers e functions necess√°rias
- [ ] **1.5** Testar conex√£o e opera√ß√µes b√°sicas

#### Backend FastAPI (Desenvolvimento)
- [ ] **1.6** Configurar ambiente FastAPI local
- [ ] **1.7** Configurar PostgreSQL local
- [ ] **1.8** Executar mesmo schema SQL
- [ ] **1.9** Implementar endpoints da API
- [ ] **1.10** Configurar autentica√ß√£o JWT
- [ ] **1.11** Implementar testes unit√°rios

### Fase 2: Adapta√ß√£o do Frontend (2-3 semanas)

#### Cria√ß√£o da Camada de Abstra√ß√£o
- [ ] **2.1** Criar `lib/api/sleepApi.ts` - Client API abstrato
- [ ] **2.2** Implementar `lib/supabase/sleepService.ts` - Cliente Supabase
- [ ] **2.3** Implementar `lib/fastapi/sleepService.ts` - Cliente FastAPI
- [ ] **2.4** Criar factory pattern para selecionar cliente baseado em env

#### Atualiza√ß√£o do Store Zustand
- [ ] **2.5** Modificar `sonoStore.ts` para usar API ao inv√©s de localStorage
- [ ] **2.6** Implementar cache local para offline-first
- [ ] **2.7** Adicionar estados de loading/error
- [ ] **2.8** Manter compatibilidade com dados existentes

#### Componentes React
- [ ] **2.9** Atualizar componentes para lidar com async operations
- [ ] **2.10** Adicionar loading states nos componentes
- [ ] **2.11** Implementar error handling e retry logic
- [ ] **2.12** Adicionar feedback visual para opera√ß√µes

### Fase 3: Migra√ß√£o de Dados (1 semana)

#### Script de Migra√ß√£o
- [ ] **3.1** Criar script para ler dados do localStorage
- [ ] **3.2** Transformar dados para formato da API
- [ ] **3.3** Implementar upload via API
- [ ] **3.4** Adicionar valida√ß√£o e rollback
- [ ] **3.5** Testar migra√ß√£o com dados reais

#### Processo de Migra√ß√£o
- [ ] **3.6** Backup autom√°tico dos dados localStorage
- [ ] **3.7** Migra√ß√£o incremental com verifica√ß√£o
- [ ] **3.8** Valida√ß√£o da integridade dos dados
- [ ] **3.9** Limpeza do localStorage ap√≥s confirma√ß√£o

### Fase 4: Testes e Deploy (1-2 semanas)

#### Testes Integrados
- [ ] **4.1** Testes E2E para todos os fluxos
- [ ] **4.2** Testes de compatibilidade entre ambientes
- [ ] **4.3** Testes de performance com dados reais
- [ ] **4.4** Testes de fallback para offline

#### Deploy e Monitoramento
- [ ] **4.5** Deploy gradual com feature flag
- [ ] **4.6** Monitoramento de APIs e errors
- [ ] **4.7** Backup e disaster recovery
- [ ] **4.8** Documenta√ß√£o para desenvolvedores

### Configura√ß√£o por Ambiente

```typescript
// lib/config/api.ts
const API_CONFIG = {
  development: {
    type: 'fastapi',
    baseURL: 'http://localhost:8000',
    auth: 'jwt'
  },
  production: {
    type: 'supabase', 
    baseURL: process.env.NEXT_PUBLIC_SUPABASE_URL,
    auth: 'supabase'
  }
}
```

### Checklist de Valida√ß√£o Final

#### Funcionalidades Cr√≠ticas
- [ ] ‚úÖ Criar registro de sono
- [ ] ‚úÖ Editar registro existente  
- [ ] ‚úÖ Marcar "acordar agora"
- [ ] ‚úÖ Visualizar gr√°fico semanal
- [ ] ‚úÖ Configurar lembretes
- [ ] ‚úÖ Ativar/desativar lembretes
- [ ] ‚úÖ Export/import de dados
- [ ] ‚úÖ Funcionamento offline (cache)

#### Compatibilidade
- [ ] ‚úÖ Supabase + Next.js (produ√ß√£o)
- [ ] ‚úÖ FastAPI + Next.js (desenvolvimento)
- [ ] ‚úÖ Migra√ß√£o de dados localStorage
- [ ] ‚úÖ Rollback para localStorage se necess√°rio

#### Performance
- [ ] ‚úÖ Tempo de carregamento < 2s
- [ ] ‚úÖ Opera√ß√µes CRUD < 500ms
- [ ] ‚úÖ Sincroniza√ß√£o de dados
- [ ] ‚úÖ Cache otimizado

---

## üìä Cronograma Estimado

| Fase | Dura√ß√£o | Recursos | Prioridade |
|------|---------|----------|------------|
| Fase 1 | 1-2 semanas | 1 Backend Dev | Alta |
| Fase 2 | 2-3 semanas | 1 Frontend Dev | Alta |
| Fase 3 | 1 semana | 1 Fullstack Dev | Cr√≠tica |
| Fase 4 | 1-2 semanas | Time completo | Alta |

**Total Estimado:** 5-8 semanas

---

## ‚ö†Ô∏è Riscos e Mitiga√ß√µes

| Risco | Probabilidade | Impacto | Mitiga√ß√£o |
|-------|---------------|---------|-----------|
| Perda de dados durante migra√ß√£o | Baixa | Alto | Backup obrigat√≥rio + valida√ß√£o |
| Incompatibilidade entre ambientes | M√©dia | M√©dio | Testes cruzados cont√≠nuos |
| Performance degradada | M√©dia | M√©dio | Cache + otimiza√ß√£o SQL |
| Regress√£o de funcionalidades | Alta | M√©dio | Testes E2E + rollback plan |

---

## üéØ PR√ìXIMOS PASSOS

### Implementa√ß√£o Pr√°tica Imediata

#### 1. Setup da Infraestrutura TDD (Semana 1)
```bash
# Configurar ambiente de testes
npm install --save-dev vitest @testing-library/react @testing-library/user-event
npm install --save-dev msw @faker-js/faker

# Criar estrutura de testes
mkdir -p __tests__/{components,hooks,services,factories,integration}/sono
mkdir -p __tests__/mocks/handlers

# Configurar factories
touch __tests__/factories/sono.ts
```

#### 2. Primeiro Ciclo RED-GREEN-REFACTOR (Semana 2)
```typescript
// Come√ßar com teste mais simples
// __tests__/components/RegistroSono.test.tsx
describe('RegistroSono - Primeiro Ciclo TDD', () => {
  it('üî¥ RED: deve renderizar formul√°rio b√°sico', () => {
    render(<RegistroSono />)
    expect(screen.getByLabelText(/hor√°rio de dormir/i)).toBeInTheDocument()
  })
})
```

#### 3. Configura√ß√£o de Quality Gates (Semana 3)
```yaml
# vitest.config.ts - Coverage espec√≠fico para sono
export default defineConfig({
  test: {
    coverage: {
      include: ['app/sono/**', 'app/components/sono/**', 'app/stores/sonoStore.ts'],
      thresholds: {
        lines: 70,
        functions: 70,
        branches: 70,
        statements: 70
      }
    }
  }
})
```

### Valida√ß√£o de Sucesso

#### Crit√©rios de Aceita√ß√£o TDD
- [ ] **Coverage**: 70%+ em todos os m√≥dulos de sono
- [ ] **Performance**: Testes executam em < 100ms cada
- [ ] **Temporal Accuracy**: 99.9%+ em c√°lculos de dura√ß√£o
- [ ] **Pattern Analysis**: An√°lise semanal funcional
- [ ] **Reminder System**: Sistema de lembretes operacional
- [ ] **Data Integrity**: Valida√ß√£o completa de dados temporais

#### Marcos de Entrega
1. **Semana 4**: Infraestrutura TDD completa
2. **Semana 6**: Componentes principais com testes
3. **Semana 8**: Sistema de lembretes testado
4. **Semana 10**: An√°lise de padr√µes implementada
5. **Semana 12**: Migra√ß√£o de dados validada

### Recursos Necess√°rios

#### Equipe M√≠nima
- **1 Frontend Developer** (TDD + React)
- **1 Backend Developer** (APIs + Banco de dados)
- **0.5 QA Engineer** (Valida√ß√£o + E2E)

#### Ferramentas Adicionais
- **Temporal Testing Library** para valida√ß√£o de timestamps
- **Sleep Pattern Analyzer** para m√©tricas de qualidade
- **Performance Monitoring** para quality gates
- **Data Migration Tools** para localStorage ‚Üí API

---

**√öltima atualiza√ß√£o:** $(date)
**Status:** üìã Plano TDD Completo - Pronto para Implementa√ß√£o
**Pr√≥ximo passo:** Setup da infraestrutura TDD e primeiro ciclo RED-GREEN-REFACTOR