# 📋 PLANO DE MIGRAÇÃO TDD - MÓDULO AUTOCONHECIMENTO

## 🎯 CONTEXTO

Migração do módulo de autoconhecimento de uma arquitetura baseada em localStorage para uma arquitetura de dados dual, seguindo **metodologia TDD rigorosa** estabelecida na FASE 0:
- **Produção**: Supabase (PostgreSQL com RLS)
- **Desenvolvimento/Testes**: Backend FastAPI local (SQLAlchemy + PostgreSQL local)
- **Metodologia**: Test-Driven Development (Red-Green-Refactor)
- **Infraestrutura**: Vitest + RTL + MSW + Quality Gates automáticos

## 🧪 PREPARAÇÃO TDD - INFRAESTRUTURA PRONTA

### ✅ Ferramentas Configuradas (FASE 0)
- **Vitest** - Test runner com coverage V8 (target: 70%+)
- **React Testing Library** - Testes user-centric
- **MSW** - Mock Service Worker para APIs
- **GitHub Actions** - Pipeline CI/CD com 7 quality gates
- **Factories & Utilities** - Geração de dados e helpers

### 🎯 Quality Gates Automáticos
| Métrica | Mínimo | Ideal |
|---------|--------|-------|
| Coverage Lines | 70% | 85% |
| Coverage Functions | 70% | 85% |
| Test Performance | < 100ms | < 50ms |
| Suite Completa | < 30s | < 15s |

---

## 🔍 1. RELATÓRIO DE AUDITORIA DO LOCALSTORAGE + TESTES

### Inventário de Chaves e Dados Armazenados

**Chave: `autoconhecimento-storage`**
- **Dados**: Sistema de notas de autoconhecimento com seções, tags e modo refúgio
- **Estrutura**:
  ```json
  {
    "state": {
      "notas": [
        {
          "id": "string",
          "titulo": "string",
          "conteudo": "string",
          "secao": "quem-sou" | "meus-porques" | "meus-padroes",
          "tags": ["string"],
          "dataCriacao": "ISO-8601",
          "dataAtualizacao": "ISO-8601",
          "imagemUrl": "string" // opcional
        }
      ],
      "modoRefugio": "boolean"
    },
    "version": 0
  }
  ```

### 🧪 Factories TDD para Dados Existentes

```typescript
// __tests__/factories/autoconhecimento.ts
export const createNota = (overrides = {}) => ({
  id: `nota-${counter++}`,
  titulo: 'Reflexão sobre mim',
  conteudo: 'Conteúdo da nota de autoconhecimento...',
  secao: 'quem-sou',
  tags: ['reflexão', 'crescimento'],
  dataCriacao: '2025-01-20T10:00:00.000Z',
  dataAtualizacao: '2025-01-20T10:00:00.000Z',
  imagemUrl: null,
  ...overrides
})

export const createModoRefugio = (overrides = {}) => ({
  modoRefugio: false,
  ...overrides
})

export const createAutoconhecimentoState = (overrides = {}) => ({
  notas: createList(createNota, 3),
  modoRefugio: false,
  ...overrides
})
```

### Componentes Dependentes + Estratégia de Testes

| Componente | Responsabilidade | Estratégia TDD |
|------------|------------------|----------------|
| **EditorNotas.tsx** | Editor WYSIWYG com tags e imagens | ✅ Testes de Formulário + Validação |
| **ListaNotas.tsx** | Lista filtrada por seção com busca | ✅ Testes de Busca + Filtros |
| **ModoRefugio.tsx** | Toggle de interface simplificada | ✅ Testes de Estado + UI |
| **AutoconhecimentoPage.tsx** | Orquestração geral do módulo | ✅ Testes de Integração |

### 🎯 Cobertura de Testes Planejada

```typescript
// Estrutura de testes para o módulo
__tests__/
├── components/
│   ├── EditorNotas.test.tsx           # Formulário + Validação
│   ├── ListaNotas.test.tsx            # Busca + Filtros
│   ├── ModoRefugio.test.tsx           # Estado + UI
│   └── AutoconhecimentoPage.test.tsx  # Integração
├── hooks/
│   ├── useAutoconhecimento.test.ts    # Store + Mutations
│   ├── useNotasSearch.test.ts         # Busca avançada
│   └── useModoRefugio.test.ts         # Modo refúgio
├── services/
│   ├── autoconhecimentoApi.test.ts    # API calls
│   └── imageUploadService.test.ts     # Upload de imagens
└── integration/
    └── autoconhecimento-flow.test.tsx # E2E scenarios
```

---

## 🗄️ 2. ESQUEMA DE BANCO DE DADOS UNIFICADO (SQL)

```sql
-- Tabela de usuários (base para todo o sistema)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de notas de autoconhecimento
CREATE TABLE self_knowledge_notes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    section VARCHAR(20) NOT NULL CHECK (section IN ('quem-sou', 'meus-porques', 'meus-padroes')),
    image_url VARCHAR(1000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de tags para notas
CREATE TABLE self_knowledge_note_tags (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    note_id UUID NOT NULL REFERENCES self_knowledge_notes(id) ON DELETE CASCADE,
    tag VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(note_id, tag)
);

-- Tabela de preferências do usuário
CREATE TABLE user_preferences (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module VARCHAR(50) NOT NULL,
    preference_key VARCHAR(100) NOT NULL,
    preference_value JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, module, preference_key)
);

-- Índices para performance
CREATE INDEX idx_self_knowledge_notes_user_id ON self_knowledge_notes(user_id);
CREATE INDEX idx_self_knowledge_notes_section ON self_knowledge_notes(user_id, section);
CREATE INDEX idx_self_knowledge_notes_title ON self_knowledge_notes USING gin(to_tsvector('portuguese', title));
CREATE INDEX idx_self_knowledge_notes_content ON self_knowledge_notes USING gin(to_tsvector('portuguese', content));
CREATE INDEX idx_self_knowledge_note_tags_note_id ON self_knowledge_note_tags(note_id);
CREATE INDEX idx_self_knowledge_note_tags_tag ON self_knowledge_note_tags(tag);
CREATE INDEX idx_user_preferences_lookup ON user_preferences(user_id, module, preference_key);
```

---

## 🌐 3. CONTRATO DE API (OpenAPI/Swagger Simplificado)

### Autenticação
```markdown
POST /auth/login
- Payload Request: { "email": "string", "password": "string" }
- Payload Response: { "token": "string", "user": { "id": "uuid", "name": "string", "email": "string" } }
- Status Codes: 200 (Success), 401 (Unauthorized), 400 (Bad Request)

GET /auth/me
- Headers: Authorization: Bearer {token}
- Payload Response: { "id": "uuid", "name": "string", "email": "string" }
- Status Codes: 200 (Success), 401 (Unauthorized)
```

### Notas de Autoconhecimento
```markdown
GET /api/self-knowledge/notes
- Headers: Authorization: Bearer {token}
- Query Params: ?section=quem-sou&search=termo&limit=50&offset=0
- Payload Response: [{ "id": "uuid", "title": "Reflexão", "content": "...", "section": "quem-sou", "tags": ["crescimento"], "imageUrl": "https://...", "createdAt": "2025-01-20T10:00:00Z" }]
- Status Codes: 200 (Success), 401 (Unauthorized)

POST /api/self-knowledge/notes
- Headers: Authorization: Bearer {token}
- Payload Request: { "title": "Nova reflexão", "content": "Conteúdo...", "section": "meus-porques", "tags": ["valores"], "imageUrl": "data:image/..." }
- Payload Response: { "id": "uuid", "title": "Nova reflexão", "content": "Conteúdo...", "section": "meus-porques", "tags": ["valores"], "imageUrl": "https://..." }
- Status Codes: 201 (Created), 400 (Bad Request), 401 (Unauthorized)

PUT /api/self-knowledge/notes/{id}
- Headers: Authorization: Bearer {token}
- Payload Request: { "title": "Título atualizado", "content": "Conteúdo atualizado...", "tags": ["nova-tag"] }
- Payload Response: { "id": "uuid", "title": "Título atualizado", "content": "Conteúdo atualizado...", "section": "quem-sou", "tags": ["nova-tag"] }
- Status Codes: 200 (Success), 404 (Not Found), 401 (Unauthorized)

DELETE /api/self-knowledge/notes/{id}
- Headers: Authorization: Bearer {token}
- Status Codes: 204 (No Content), 404 (Not Found), 401 (Unauthorized)
```

### Preferências do Usuário
```markdown
GET /api/user/preferences/self-knowledge
- Headers: Authorization: Bearer {token}
- Payload Response: { "refugeMode": false, "showDates": true, "cardsPerPage": 10 }
- Status Codes: 200 (Success), 401 (Unauthorized)

PUT /api/user/preferences/self-knowledge
- Headers: Authorization: Bearer {token}
- Payload Request: { "refugeMode": true, "showDates": false }
- Payload Response: { "refugeMode": true, "showDates": false, "cardsPerPage": 10 }
- Status Codes: 200 (Success), 400 (Invalid Data), 401 (Unauthorized)
```

### Upload de Imagens
```markdown
POST /api/upload/image
- Headers: Authorization: Bearer {token}, Content-Type: multipart/form-data
- Payload Request: FormData com arquivo de imagem
- Payload Response: { "url": "https://storage.supabase.co/...", "filename": "image.jpg" }
- Status Codes: 201 (Created), 400 (Invalid File), 401 (Unauthorized), 413 (File Too Large)
```

---

## 📋 4. PLANO DE MIGRAÇÃO TDD DUAL-TRACK (MÉTODO MOSCOW)

### **MUST HAVE (Crítico + TDD Rigoroso)**

#### 🔴 RED → 🟢 GREEN → 🔵 REFACTOR

1. **[TDD Backend]** Testes de autenticação JWT → Implementação → Refatoração
2. **[TDD Backend]** Testes APIs self-knowledge/notes → Implementação → Refatoração
3. **[TDD Frontend]** Testes service layer → Implementação → Refatoração
4. **[TDD Frontend]** Testes fallback localStorage → Implementação → Refatoração
5. **[TDD Database]** Testes schema + migrations → Implementação → Refatoração

**Quality Gate**: ✅ Coverage > 70% + Todos os testes passando antes de prosseguir

### **SHOULD HAVE (TDD + Experiência Completa)**

6. **[TDD Backend]** Testes APIs upload imagens → Implementação → Refatoração
7. **[TDD Frontend]** Testes migração stores → Implementação → Refatoração
8. **[TDD Frontend]** Testes sync offline/online → Implementação → Refatoração
9. **[TDD Database]** Testes RLS Supabase → Implementação → Refatoração
10. **[TDD Migration]** Testes script migração → Implementação → Refatoração

**Quality Gate**: ✅ Coverage > 75% + Performance < 100ms + Zero bugs críticos

### **COULD HAVE (TDD + Otimização)**

11. **[TDD Backend]** Testes busca full-text → Implementação → Refatoração
12. **[TDD Frontend]** Testes optimistic updates → Implementação → Refatoração
13. **[TDD Frontend]** Testes backup/restore → Implementação → Refatoração
14. **[TDD Monitoring]** Testes logs/métricas → Implementação → Refatoração
15. **[TDD Performance]** Testes paginação/lazy → Implementação → Refatoração

**Quality Gate**: ✅ Coverage > 80% + Performance < 50ms + Métricas de qualidade

### **WON'T HAVE (Não implementar nesta iteração)**

16. **[Features]** Integração com IA para análise de padrões
17. **[Features]** Sistema de comentários em notas
18. **[Infrastructure]** Deploy automatizado com CI/CD (já configurado na FASE 0)
19. **[Features]** Notificações push para lembretes
20. **[Features]** Versionamento de notas com histórico

---

## 🔧 CHECKLIST DE IMPLEMENTAÇÃO TDD

### **Fase 1: Preparação TDD (Must Have)**
- [ ] 🔴 Escrever testes de autenticação JWT → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Escrever testes RLS Supabase → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Escrever testes schema BD → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Escrever testes service layer → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Escrever testes env config → 🟢 Implementar → 🔵 Refatorar
- [ ] ✅ **Quality Gate**: Coverage > 70% + Todos os testes passando

### **Fase 2: APIs Core TDD (Must Have + Should Have)**
- [ ] 🔴 Testes CRUD self-knowledge notes → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes sistema de tags → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes busca e filtros → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes upload imagens → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes preferências usuário → 🟢 Implementar → 🔵 Refatorar
- [ ] ✅ **Quality Gate**: Coverage > 75% + Performance < 100ms

### **Fase 3: Migração Frontend TDD (Should Have)**
- [ ] 🔴 Testes EditorNotas → 🟢 Migrar APIs → 🔵 Refatorar
- [ ] 🔴 Testes ListaNotas → 🟢 Migrar APIs → 🔵 Refatorar
- [ ] 🔴 Testes ModoRefugio → 🟢 Migrar APIs → 🔵 Refatorar
- [ ] 🔴 Testes AutoconhecimentoPage → 🟢 Migrar APIs → 🔵 Refatorar
- [ ] 🔴 Testes sincronização → 🟢 Implementar → 🔵 Refatorar
- [ ] ✅ **Quality Gate**: Coverage > 80% + Zero bugs críticos

### **Fase 4: Script Migração TDD (Should Have)**
- [ ] 🔴 Testes export localStorage → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes import BD → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes migração real → 🟢 Executar → 🔵 Refatorar
- [ ] 🔴 Testes rollback → 🟢 Implementar → 🔵 Refatorar
- [ ] ✅ **Quality Gate**: 100% dados migrados + Zero perda

### **Fase 5: Otimizações TDD (Could Have)**
- [ ] 🔴 Testes cache frontend → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes otimização queries → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes compressão imagens → 🟢 Implementar → 🔵 Refatorar
- [ ] 🔴 Testes logs/métricas → 🟢 Implementar → 🔵 Refatorar
- [ ] ✅ **Quality Gate**: Coverage > 85% + Performance < 50ms

---

## 🧪 TEMPLATES DE TESTE ESPECÍFICOS DO MÓDULO

### Template: Componente EditorNotas

```typescript
// __tests__/components/EditorNotas.test.tsx
import { render, screen, userEvent } from '@/test-utils'
import { EditorNotas } from '@/components/autoconhecimento/EditorNotas'
import { createNota, createList } from '@/factories/autoconhecimento'

describe('EditorNotas', () => {
  const defaultProps = {
    id: undefined,
    secaoAtual: 'quem-sou' as const,
    onSave: vi.fn(),
  }

  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('🔴 RED: Renderização', () => {
    it('deve renderizar formulário de nova nota', () => {
      render(<EditorNotas {...defaultProps} />)

      expect(screen.getByLabelText(/título/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/conteúdo/i)).toBeInTheDocument()
      expect(screen.getByRole('button', { name: /salvar/i })).toBeInTheDocument()
    })

    it('deve renderizar formulário de edição quando id fornecido', () => {
      const nota = createNota({ titulo: 'Nota existente' })
      render(<EditorNotas {...defaultProps} id={nota.id} />)

      expect(screen.getByDisplayValue('Nota existente')).toBeInTheDocument()
    })
  })

  describe('🟢 GREEN: Interações', () => {
    it('deve criar nova nota quando formulário é submetido', async () => {
      const user = userEvent.setup()
      const onSave = vi.fn()
      render(<EditorNotas {...defaultProps} onSave={onSave} />)

      await user.type(screen.getByLabelText(/título/i), 'Nova reflexão')
      await user.type(screen.getByLabelText(/conteúdo/i), 'Conteúdo da reflexão')
      await user.click(screen.getByRole('button', { name: /salvar/i }))

      expect(onSave).toHaveBeenCalledTimes(1)
    })

    it('deve adicionar tags quando usuário digita e pressiona Enter', async () => {
      const user = userEvent.setup()
      render(<EditorNotas {...defaultProps} />)

      const tagInput = screen.getByLabelText(/nova tag/i)
      await user.type(tagInput, 'crescimento{enter}')

      expect(screen.getByText('crescimento')).toBeInTheDocument()
    })
  })

  describe('🔵 REFACTOR: Estados e Validação', () => {
    it('deve validar campos obrigatórios', async () => {
      const user = userEvent.setup()
      render(<EditorNotas {...defaultProps} />)

      await user.click(screen.getByRole('button', { name: /salvar/i }))

      expect(screen.getByText(/título é obrigatório/i)).toBeInTheDocument()
      expect(screen.getByText(/conteúdo é obrigatório/i)).toBeInTheDocument()
    })

    it('deve mostrar interface simplificada no modo refúgio', () => {
      // Mock do store com modo refúgio ativado
      vi.mocked(useAutoconhecimentoStore).mockReturnValue({
        modoRefugio: true,
        // ... outros valores
      })

      render(<EditorNotas {...defaultProps} />)

      expect(screen.getByText(/modo refúgio ativado/i)).toBeInTheDocument()
    })
  })
})
```

### Template: Hook useAutoconhecimento

```typescript
// __tests__/hooks/useAutoconhecimento.test.ts
import { renderHook, act } from '@testing-library/react'
import { useAutoconhecimento } from '@/hooks/useAutoconhecimento'
import { createQueryWrapper } from '@/test-utils'
import { server } from '@/mocks/server'
import { http, HttpResponse } from 'msw'

describe('useAutoconhecimento', () => {
  describe('🔴 RED: Estado Inicial', () => {
    it('deve retornar estado inicial correto', () => {
      const { result } = renderHook(() => useAutoconhecimento(), {
        wrapper: createQueryWrapper()
      })

      expect(result.current.notas).toEqual([])
      expect(result.current.isLoading).toBe(true)
      expect(result.current.error).toBe(null)
    })
  })

  describe('🟢 GREEN: Operações CRUD', () => {
    it('deve adicionar nota com sucesso', async () => {
      const newNota = createNota({ titulo: 'Nova reflexão', secao: 'quem-sou' })

      server.use(
        http.post('/api/self-knowledge/notes', () => {
          return HttpResponse.json(newNota)
        })
      )

      const { result } = renderHook(() => useAutoconhecimento(), {
        wrapper: createQueryWrapper()
      })

      await act(async () => {
        await result.current.addNota(newNota)
      })

      expect(result.current.notas).toContainEqual(newNota)
    })
  })

  describe('🔵 REFACTOR: Error Handling', () => {
    it('deve lidar com erros de API', async () => {
      server.use(
        http.post('/api/self-knowledge/notes', () => {
          return HttpResponse.error()
        })
      )

      const { result } = renderHook(() => useAutoconhecimento(), {
        wrapper: createQueryWrapper()
      })

      await act(async () => {
        try {
          await result.current.addNota(createNota())
        } catch (error) {
          expect(error).toBeDefined()
        }
      })

      expect(result.current.error).toBeDefined()
    })
  })
})
```

### Template: Serviço AutoconhecimentoAPI

```typescript
// __tests__/services/autoconhecimentoApi.test.ts
import { vi } from 'vitest'
import { autoconhecimentoApi } from '@/services/autoconhecimentoApi'
import { server } from '@/mocks/server'
import { http, HttpResponse } from 'msw'
import { createNota, createList } from '@/factories/autoconhecimento'

describe('AutoconhecimentoAPI', () => {
  describe('🔴 RED: Self Knowledge Notes API', () => {
    it('deve buscar notas do usuário', async () => {
      const mockNotas = createList(createNota, 3)

      server.use(
        http.get('/api/self-knowledge/notes', () => HttpResponse.json(mockNotas))
      )

      const result = await autoconhecimentoApi.getNotas()
      expect(result).toEqual(mockNotas)
    })

    it('deve filtrar notas por seção', async () => {
      const notasQuemSou = createList(createNota, 2, [
        { secao: 'quem-sou' },
        { secao: 'quem-sou' }
      ])

      server.use(
        http.get('/api/self-knowledge/notes', ({ request }) => {
          const url = new URL(request.url)
          const section = url.searchParams.get('section')

          if (section === 'quem-sou') {
            return HttpResponse.json(notasQuemSou)
          }
          return HttpResponse.json([])
        })
      )

      const result = await autoconhecimentoApi.getNotas({ section: 'quem-sou' })
      expect(result).toEqual(notasQuemSou)
      expect(result.every(n => n.secao === 'quem-sou')).toBe(true)
    })
  })

  describe('🟢 GREEN: Error Handling', () => {
    it('deve lidar com erro 500 da API', async () => {
      server.use(
        http.get('/api/self-knowledge/notes', () => HttpResponse.error())
      )

      await expect(autoconhecimentoApi.getNotas()).rejects.toThrow()
    })
  })

  describe('🔵 REFACTOR: Optimistic Updates', () => {
    it('deve implementar optimistic updates para notas', async () => {
      const newNota = createNota()

      server.use(
        http.post('/api/self-knowledge/notes', () => HttpResponse.json(newNota))
      )

      const result = await autoconhecimentoApi.createNota(newNota)
      expect(result.id).toBeDefined()
      expect(result.titulo).toBe(newNota.titulo)
    })
  })
})
```

### Template: Integração E2E

```typescript
// __tests__/integration/autoconhecimento-flow.test.tsx
import { render, screen, userEvent } from '@/test-utils'
import { AutoconhecimentoPage } from '@/app/autoconhecimento/page'
import { server } from '@/mocks/server'
import { http, HttpResponse } from 'msw'

describe('Autoconhecimento E2E Flow', () => {
  describe('🔴 RED: Fluxo Completo', () => {
    it('deve permitir criar → editar → buscar → deletar nota', async () => {
      const user = userEvent.setup()

      // Setup API mocks
      server.use(
        http.get('/api/self-knowledge/notes', () => HttpResponse.json([])),
        http.post('/api/self-knowledge/notes', () => HttpResponse.json({ id: '1' })),
        http.put('/api/self-knowledge/notes/1', () => HttpResponse.json({ id: '1' })),
        http.delete('/api/self-knowledge/notes/1', () => new HttpResponse(null, { status: 204 }))
      )

      render(<AutoconhecimentoPage />)

      // 1. Criar nova nota
      await user.click(screen.getByRole('button', { name: /nova nota/i }))
      await user.type(screen.getByLabelText(/título/i), 'Minha reflexão')
      await user.type(screen.getByLabelText(/conteúdo/i), 'Conteúdo da reflexão')
      await user.click(screen.getByRole('button', { name: /salvar/i }))

      // 2. Editar nota
      await user.click(screen.getByRole('button', { name: /editar/i }))
      await user.clear(screen.getByLabelText(/título/i))
      await user.type(screen.getByLabelText(/título/i), 'Reflexão editada')
      await user.click(screen.getByRole('button', { name: /salvar/i }))

      // 3. Buscar nota
      await user.type(screen.getByLabelText(/buscar/i), 'reflexão')
      expect(screen.getByText(/reflexão editada/i)).toBeInTheDocument()

      // 4. Ativar modo refúgio
      await user.click(screen.getByRole('button', { name: /modo refúgio/i }))
      expect(screen.getByText(/modo refúgio ativado/i)).toBeInTheDocument()
    })
  })
})
```

---

## 🚀 CONSIDERAÇÕES TÉCNICAS TDD

### Arquitetura do Service Layer
```typescript
// Exemplo de service abstrato para dual-track
interface IAutoconhecimentoService {
  getNotas: (filters?) => Promise<Nota[]>
  createNota: (data: CreateNotaDto) => Promise<Nota>
  updateNota: (id: string, data: UpdateNotaDto) => Promise<Nota>
  deleteNota: (id: string) => Promise<void>
  updatePreferences: (prefs: UserPreferences) => Promise<UserPreferences>
}

// Implementação para FastAPI
class FastAPIAutoconhecimentoService implements IAutoconhecimentoService {
  // implementação específica
}

// Implementação para Supabase
class SupabaseAutoconhecimentoService implements IAutoconhecimentoService {
  // implementação específica
}
```

### MSW Handlers Específicos do Módulo

```typescript
// __tests__/mocks/handlers/autoconhecimento.ts
import { http, HttpResponse } from 'msw'
import { createNota, createList, createModoRefugio } from '@/factories/autoconhecimento'

export const autoconhecimentoHandlers = [
  // Self Knowledge Notes
  http.get('/api/self-knowledge/notes', ({ request }) => {
    const url = new URL(request.url)
    const section = url.searchParams.get('section')
    const search = url.searchParams.get('search')

    let notas = createList(createNota, 5)

    if (section) {
      notas = notas.filter(nota => nota.secao === section)
    }

    if (search) {
      notas = notas.filter(nota =>
        nota.titulo.toLowerCase().includes(search.toLowerCase()) ||
        nota.conteudo.toLowerCase().includes(search.toLowerCase())
      )
    }

    return HttpResponse.json(notas)
  }),

  http.post('/api/self-knowledge/notes', async ({ request }) => {
    const newNota = await request.json()
    return HttpResponse.json(createNota(newNota), { status: 201 })
  }),

  http.put('/api/self-knowledge/notes/:id', async ({ request, params }) => {
    const updates = await request.json()
    return HttpResponse.json(createNota({ id: params.id, ...updates }))
  }),

  http.delete('/api/self-knowledge/notes/:id', () => {
    return new HttpResponse(null, { status: 204 })
  }),

  // User Preferences
  http.get('/api/user/preferences/self-knowledge', () => {
    return HttpResponse.json(createModoRefugio())
  }),

  http.put('/api/user/preferences/self-knowledge', async ({ request }) => {
    const preferences = await request.json()
    return HttpResponse.json(createModoRefugio(preferences))
  }),

  // Image Upload
  http.post('/api/upload/image', () => {
    return HttpResponse.json({
      url: 'https://storage.supabase.co/bucket/image.jpg',
      filename: 'image.jpg'
    }, { status: 201 })
  }),

  // Error scenarios
  http.get('/api/self-knowledge/notes/error', () => {
    return HttpResponse.error()
  }),

  http.post('/api/self-knowledge/notes/timeout', () => {
    return new Promise(() => {}) // Never resolves (timeout)
  })
]
```

### Estratégia de Migração TDD
1. **🔴 Testes de backup** → **🟢 Backup automático** → **🔵 Refatoração**
2. **🔴 Testes migração gradual** → **🟢 Implementação por etapas** → **🔵 Otimização**
3. **🔴 Testes modo híbrido** → **🟢 Transição controlada** → **🔵 Limpeza**
4. **🔴 Testes rollback** → **🟢 Recuperação automática** → **🔵 Validação**

---

## 🔧 PIPELINE CI/CD ESPECÍFICO DO MÓDULO

### GitHub Actions Workflow

```yaml
# .github/workflows/autoconhecimento-module.yml
name: Autoconhecimento Module CI/CD

on:
  push:
    paths:
      - 'app/autoconhecimento/**'
      - '__tests__/autoconhecimento/**'
      - 'app/components/autoconhecimento/**'

jobs:
  test-autoconhecimento:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Autoconhecimento Tests
        run: npm run test -- autoconhecimento --coverage

      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(npm run test:coverage -- --reporter=json | jq '.total.lines.pct')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage $COVERAGE% below threshold 70%"
            exit 1
          fi

      - name: Performance Tests
        run: npm run test -- autoconhecimento --reporter=verbose
        env:
          VITEST_MAX_DURATION: 100

  integration-autoconhecimento:
    needs: test-autoconhecimento
    runs-on: ubuntu-latest
    steps:
      - name: Integration Tests
        run: npm run test:integration -- autoconhecimento

      - name: API Contract Tests
        run: npm run test:contract -- autoconhecimento

  quality-gates:
    needs: [test-autoconhecimento, integration-autoconhecimento]
    runs-on: ubuntu-latest
    steps:
      - name: Quality Gate Check
        run: |
          echo "✅ Unit Tests: Passed"
          echo "✅ Integration Tests: Passed"
          echo "✅ Coverage > 70%: Passed"
          echo "✅ Performance < 100ms: Passed"
          echo "🎯 Autoconhecimento Module: READY FOR DEPLOYMENT"
```

---

## 📊 MÉTRICAS DE SUCESSO TDD

### Indicadores Técnicos (Baseados na FASE 0)

| Métrica | Target FASE 0 | Target Autoconhecimento | Status |
|---------|---------------|------------------------|--------|
| **Coverage Lines** | 70% | 75% | 🎯 |
| **Coverage Functions** | 70% | 75% | 🎯 |
| **Test Performance** | < 100ms | < 80ms | 🎯 |
| **Suite Completa** | < 30s | < 10s | 🎯 |
| **Zero Bugs Críticos** | ✅ | ✅ | 🎯 |

### Indicadores de Qualidade TDD

| Fase | Red Tests | Green Implementation | Blue Refactor | Quality Gate |
|------|-----------|---------------------|---------------|--------------|
| **Preparação** | 12 testes | 12 implementações | 3 refatorações | Coverage > 70% |
| **APIs Core** | 20 testes | 20 implementações | 4 refatorações | Coverage > 75% |
| **Frontend** | 25 testes | 25 implementações | 5 refatorações | Coverage > 80% |
| **Migração** | 8 testes | 8 implementações | 2 refatorações | 100% dados |
| **Otimização** | 10 testes | 10 implementações | 6 refatorações | Coverage > 85% |

---

## ⏰ CRONOGRAMA DETALHADO TDD

### Semana 1-2: Preparação e Setup TDD
- **Dias 1-3**: Configurar factories específicas do módulo
- **Dias 4-7**: Criar MSW handlers para todas as APIs
- **Dias 8-10**: Implementar templates de teste base
- **Quality Gate**: 100% setup funcional + 6 testes de verificação passando

### Semana 3-4: APIs Core (TDD Rigoroso)
- **Dias 11-14**: 🔴 Testes self-knowledge notes → 🟢 Implementação → 🔵 Refatoração
- **Dias 15-18**: 🔴 Testes sistema tags → 🟢 Implementação → 🔵 Refatoração
- **Dias 19-21**: 🔴 Testes preferências → 🟢 Implementação → 🔵 Refatoração
- **Quality Gate**: Coverage > 75% + Performance < 100ms

### Semana 5-6: Frontend Migration (TDD)
- **Dias 22-25**: 🔴 Testes componentes → 🟢 Migração → 🔵 Refatoração
- **Dias 26-28**: 🔴 Testes hooks → 🟢 Implementação → 🔵 Refatoração
- **Dias 29-31**: 🔴 Testes integração → 🟢 E2E → 🔵 Otimização
- **Quality Gate**: Coverage > 80% + Zero bugs críticos

### Semana 7-8: Migração de Dados e Finalização
- **Dias 32-35**: 🔴 Testes migração → 🟢 Script → 🔵 Validação
- **Dias 36-38**: 🔴 Testes rollback → 🟢 Implementação → 🔵 Documentação
- **Dias 39-42**: Otimizações finais e documentação
- **Quality Gate**: 100% dados migrados + Coverage > 85%

---

**📅 Cronograma Total Estimado**: 6-8 semanas (incluindo TDD rigoroso)
**🔧 Esforço Técnico**: Alto (devido ao TDD, mas com ROI comprovado)
**⚠️ Risco**: Baixo (infraestrutura FASE 0 + testes abrangentes)
**👥 Recursos**: 1 desenvolvedor full-stack + infraestrutura TDD pronta

---

## ✅ CHECKLIST DE VALIDAÇÃO FINAL

### Preparação TDD (FASE 0 Integrada)
- [ ] ✅ Infraestrutura Vitest + RTL + MSW configurada
- [ ] ✅ Factories específicas do módulo criadas
- [ ] ✅ MSW handlers para todas as APIs implementados
- [ ] ✅ Templates de teste documentados
- [ ] ✅ Pipeline CI/CD específico configurado

### Quality Gates por Fase
- [ ] ✅ **Preparação**: Coverage > 70% + Setup 100% funcional
- [ ] ✅ **APIs Core**: Coverage > 75% + Performance < 100ms
- [ ] ✅ **Frontend**: Coverage > 80% + Zero bugs críticos
- [ ] ✅ **Migração**: 100% dados migrados + Rollback testado
- [ ] ✅ **Finalização**: Coverage > 85% + Documentação completa

---

**🏆 STATUS**: ✅ **PLANO REFATORADO COMPLETO - PRONTO PARA EXECUÇÃO**

*Este plano refatorado integra completamente a metodologia e infraestrutura TDD estabelecida na FASE 0, garantindo uma migração segura, testada e de alta qualidade para o módulo de autoconhecimento, servindo como modelo para todos os demais módulos do StayFocus.*